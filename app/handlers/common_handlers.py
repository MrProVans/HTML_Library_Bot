from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
import app.database as db
from app.middlewares import TestMiddleware

common_router = Router()

common_router.message.middleware(TestMiddleware())

# class Reg(StatesGroup):
#     name = State()
#     number = State()


@common_router.message(Command('start'))
async def start_handler(message: Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! ü§©\n\n–ù–∞—à —Å–µ—Ä–≤–∏—Å –ø–æ–º–æ–≥–∞–µ—Ç –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º –∏ —Å–∞–π—Ç–æ–ª–æ–≥–∞–º,"
                         f" –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è HTML –∏ CSS-–∫–æ–¥—ã. \n\n–¢–≤–æ–π ID: {message.from_user.id} "
                         f"\n\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
                         )

@common_router.message(Command('privacy'))
async def help_handler(message: Message):
    """–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    await message.answer(
        "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ üëá",
        reply_markup=kb.inline_privacy
    )

@common_router.message(Command('help'))
async def help_handler(message: Message):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É"""
    if str(message.from_user.id) in db.get_clients_id():
        await message.bot.send_message(message.chat.id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É "
                                                        f"–Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! \n\n–ú—ã —Å—Ç–∞—Ä–∞–ª–∏—Å—å, –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–µ—Å–µ—Ç –º–Ω–æ–≥–æ –ø–æ–ª—å–∑—ã! üòÉ"
                                                        f"\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Ç—É—Ç üëá",
                                       reply_markup=kb.client_menu
                                       )
    elif str(message.from_user.id) in db.get_admins_id():
        await message.bot.send_message(message.chat.id, f"–ó–¥–∞—Ä–æ–≤–∞, {message.from_user.first_name}!\n"
                                                        f"–ß–µ —Ç—ã, –∫–æ–º–∞–Ω–¥—ã –∑–∞–±—ã–ª?üòÖ \n–õ–∞–¥–Ω–æ, –ø–æ—Å–º–æ—Ç—Ä–∏ —Ç—É—Ç üëá",
                                       reply_markup=kb.admin_menu
                                       )
    else:
        await message.bot.send_message(message.chat.id, f"–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø üëá", reply_markup=kb.buy_access)


# @router.message(Command("get_photo"))
# async def get_photo(message: Message):
#     await message.answer_photo(photo="—Å—Å—ã–ª–∫–∞", caption="–æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ")
#
# @router.message(F.text == "–ê?")
# async def cmd_help(message: Message):
#     await message.answer("–ê?")

# @router.callback_query(F.data == 'catalog')
# async def callback_query(callback: CallbackQuery):
#     await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–∞–ª–æ–≥')
#     await callback.message.edit_text('–ü—Ä–∏–≤–µ—Ç!', reply_markup=await kb.inline_cars())
#
#
# @router.message(Command('reg'))
# async def reg_one(message: Message, state: FSMContext):
#     await state.set_state(Reg.name)
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è')
#
# @router.message(Reg.name)
# async def reg_two(message: Message, state: FSMContext):
#     await state.update_data(name=message.text)
#
#     await state.set_state(Reg.number)
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
#
# @router.message(Reg.number)
# async def two_three(message: Message, state: FSMContext):
#     await state.update_data(number=message.text)
#     data = await state.get_data()
#     await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò–º—è: {data["name"]}, –ù–æ–º–µ—Ä: {data["number"]}')
#     await state.clear()