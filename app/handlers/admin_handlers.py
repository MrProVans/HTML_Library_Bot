from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton)

import app.database as db
import app.keyboards as kb
from app.middlewares import TestMiddleware

admin_router = Router()

admin_router.message.middleware(TestMiddleware())

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤
ADMINS = db.get_admins_id()
print(f"–°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤: {ADMINS}")


class TaskState(StatesGroup):
    waiting_for_task_text = State()
    waiting_for_task_edit = State()
    waiting_for_task_delete = State()


# @admin_router.message(Command('AdminMenu'))
# async def admin_help_handler(message: Message):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
#     if str(message.from_user.id) in ADMINS:
#         await message.reply(
#             "‚ÑπÔ∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n"
#             "/AddUser - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
#             "/RemoveUser - –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
#             "/AddCode - –î–æ–±–∞–≤–∏—Ç—å HTML/CSS –∫–æ–¥\n"
#             "/EditCode - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥\n"
#             "/DeleteCode - –£–¥–∞–ª–∏—Ç—å –∫–æ–¥",
#             parse_mode="Markdown"
#         )
#     else:
#         await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

@admin_router.callback_query(F.data == 'open_admin_menu')
async def open_admin_menu(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏"""
    if str(callback.message.chat.id) in ADMINS:
        await callback.message.answer(
            "‚ÑπÔ∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n"
            "/ShowClients - –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
            "/AddClient - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞\n"
            "/DeleteClient - –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞\n",
            "/AddCode - –î–æ–±–∞–≤–∏—Ç—å HTML/CSS –∫–æ–¥\n"
            "/EditCode - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥\n"
            "/DeleteCode - –£–¥–∞–ª–∏—Ç—å –∫–æ–¥\n"
            "/TaskMenu - –ú–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á",
            parse_mode="Markdown"
        )
        await callback.answer('')
    else:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

@admin_router.message(Command("ShowClients"))
async def show_clients(message: Message):
    if str(message.from_user.id) in ADMINS:
        await message.answer("–¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

@admin_router.message(Command("AddClient"))
async def add_client(message: Message):
    if str(message.from_user.id) in ADMINS:
        await message.answer("–¢—É—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

@admin_router.message(Command("DeleteClient"))
async def delete_client(message: Message):
    if str(message.from_user.id) in ADMINS:
        await message.answer("–¢—É—Ç —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

@admin_router.message(Command("TaskMenu"))
async def task_menu(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    if str(message.from_user.id) in ADMINS:
        await message.answer("üìå *–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏:*", reply_markup=kb.task_menu,
                             parse_mode="Markdown")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@admin_router.callback_query(F.data == "add_task")
async def add_task_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskState.waiting_for_task_text)
    await callback.answer()

@admin_router.message(TaskState.waiting_for_task_text)
async def process_task_text(message: Message, state: FSMContext):
    db.add_task(message.text)
    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=kb.task_menu)
    await state.clear()

# ‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
@admin_router.callback_query(lambda c: c.data == "edit_task")
async def edit_task_callback(callback: CallbackQuery, state: FSMContext):
    tasks = db.get_tasks()
    if not tasks:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    buttons = [InlineKeyboardButton(text=t['text'], callback_data=f"edit_{t['_id']}") for t in tasks]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await callback.message.answer("‚úè –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await callback.answer()

@admin_router.callback_query(lambda c: c.data.startswith("edit_"))
async def process_task_edit(callback: CallbackQuery, state: FSMContext):
    task_id = callback.data.split("_")[1]
    await state.update_data(task_id=task_id)
    await callback.message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskState.waiting_for_task_edit)
    await callback.answer()

@admin_router.message(TaskState.waiting_for_task_edit)
async def save_task_edit(message: Message, state: FSMContext):
    data = await state.get_data()
    db.edit_task(data["task_id"], message.text)
    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=kb.task_menu)
    await state.clear()

# üóë –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@admin_router.callback_query(lambda c: c.data == "delete_task")
async def delete_task_callback(callback: CallbackQuery, state: FSMContext):
    tasks = db.get_tasks()
    if not tasks:
        await callback.message.answer("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á.")
        return

    buttons = [InlineKeyboardButton(text=t['text'], callback_data=f"delete_{t['_id']}") for t in tasks]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await callback.message.answer("üóë –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await callback.answer()

@admin_router.callback_query(lambda c: c.data.startswith("delete_"))
async def process_task_delete(callback: CallbackQuery):
    task_id = callback.data.split("_")[1]
    db.delete_task(task_id)
    await callback.message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=kb.task_menu)
    await callback.answer()

# üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á
@admin_router.callback_query(lambda c: c.data == "view_tasks")
async def view_tasks_callback(callback: CallbackQuery):
    tasks = db.get_tasks()
    if not tasks:
        await callback.message.answer("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á.")
    else:
        text = "\n".join([f"üìå {t['text']} (üóì {t['deadline']})" for t in tasks])
        await callback.message.answer(f"üìã *–ó–∞–¥–∞—á–∏:*\n{text}", parse_mode="Markdown")
    await callback.answer()

# ‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
@admin_router.callback_query(lambda c: c.data == "complete_task")
async def complete_task_callback(callback: CallbackQuery):
    tasks = db.get_tasks()
    if not tasks:
        await callback.message.answer("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        return

    buttons = [InlineKeyboardButton(text=t['text'], callback_data=f"complete_{t['_id']}") for t in tasks]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await callback.message.answer("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:", reply_markup=keyboard)
    await callback.answer()

@admin_router.callback_query(lambda c: c.data.startswith("complete_"))
async def process_task_complete(callback: CallbackQuery):
    task_id = callback.data.split("_")[1]
    db.complete_task(task_id)
    await callback.message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=kb.task_menu)
    await callback.answer()
#
#
# @admin_router.message(Command("AddUser"))
# async def add_user_handler(message: Message):
#     if not is_admin(message.from_user.id):
#         return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
#
#     args = message.text.split()
#     if len(args) != 2 or not args[1].isdigit():
#         return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /AddUser <id>")
#
#     user_id = int(args[1])
#     await db.users.insert_one({"user_id": user_id})
#     await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω!")
#
#
# @admin_router.message(Command("RemoveUser"))
# async def remove_user_handler(message: Message):
#     if not is_admin(message.from_user.id):
#         return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
#
#     args = message.text.split()
#     if len(args) != 2 or not args[1].isdigit():
#         return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /RemoveUser <id>")
#
#     user_id = int(args[1])
#     result = await db.users.delete_one({"user_id": user_id})
#     if result.deleted_count:
#         await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω!")
#     else:
#         await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


